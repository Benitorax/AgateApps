
    # Security headers.
    add_header X-Xss-Protection "1; mode=block";
    add_header X-Content-Type-options "no sniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

    # Redirects HTTP to HTTPS.
    # You can remove this in development.
    if ($scheme = http) {
        return 301 https://$http_host$request_uri;
    }

    # Avoids getting 404 errors for missing map tiles.
    location ~ ^/maps_tiles {
        try_files $uri @rewritemaptiles;
    }

    # Rewrite all to index.php
    location @rewritemaptiles {
        rewrite ^(.*)$ /maps_tiles/empty.jpg last;
    }

    # Caches assets
    # You can disable this in development if you encounter cache issues with assets.
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|eot|ttf|woff2?|svg) {
        if ($args ~ "assetv=")  {
            expires 1y;
            access_log off;
            add_header Cache-Control "public" always;
        }
    }

    # Try to serve file directly, fallback to rewrite.
    location / {
        try_files $uri @rewriteapp;
    }

    # Rewrite all to index.php. This will trigger next location.
    location @rewriteapp {
        rewrite ^(.*)$ /index.php/$1 last;
    }

    # Redirect everything to Heroku.
    # In development, replace this with your php-fpm/php-cgi proxy.
    location ~ ^/index\.php(/|$) {
        try_files @heroku-fcgi @heroku-fcgi;
        internal;
    }

    # Return 404 for all other php files not matching the front controller.
    # This prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    # Heroku needs to use stderr, but in dev you can switch to a log file.
    error_log stderr;
    access_log stderr;
